//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension API {

    /**
    Thermostat Summary (Polling)

    This request retrieves a list of thermostat configuration and state revisions. This request is a light-weight polling method which will only return the revision numbers for the significant portions of the thermostat data. It is the responsibility of the caller to store these revisions for future determination whether changes occurred at the next poll interval. The intent is to permit the caller to determine whether a thermostat has changed since the last poll. Retrieval of a whole thermostat including runtime data is expensive and impractical for large amounts of thermostat such as a management set hierarchy, especially if nothing has changed. By storing the retrieved revisions, the caller may determine whether to get a thermostat and which sections of the thermostat should be retrieved.  Most revisions are UTC date/time stamps in the format  YYMMDDHHMMSS. However, due to possible time drift between the API consumer, the server and thermostat, it is recommended that they are treated as a string, rather than as a date/time stamp. The recommended method to test for revision changes is to simply do a string comparison on the previous and current revision. If the strings match, nothing changed. Otherwise request the thermostat including the relevant information which changed.
    */
    public enum GetThemostatSummary {

        public static let service = APIService<Response>(id: "getThemostatSummary", tag: "", method: "GET", path: "/themostatSummary", hasBody: false)

        public final class Request: APIRequest<Response> {

            public init() {
                super.init(service: GetThemostatSummary.service)
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = [AccessTokenRequest]

            /** search results matching criteria */
            case status200([AccessTokenRequest])

            /** bad input parameter */
            case status400

            public var success: [AccessTokenRequest]? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status400: return 400
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status400: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode([AccessTokenRequest].self, from: data))
                case 400: self = .status400
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
